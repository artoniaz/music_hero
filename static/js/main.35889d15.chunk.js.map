{"version":3,"sources":["components/Header.js","components/TabType.js","musicAPI.js","components/Search.js","components/MusicRecord.js","components/Loader.js","components/Results.js","components/Footer.js","components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","onClick","resetApp","TabType","tabType","activeTab","getTabValue","tabValue","toUpperCase","tabvalue","musicAPI","query","API","fetch","then","response","json","catch","error","console","log","Search","state","userInput","miniSearch","callSearch","e","a","preventDefault","musicData","length","setState","toggleModal","getMusicData","handleUserInput","target","value","attributes","handleScroll","window","scrollY","addEventListener","this","removeEventListener","types","tabTypes","map","type","key","duration","height","onSubmit","placeholder","onChange","disabled","Component","MusicRecord","recordData","title","name","artist","tabTypesRecords","id","Spinner","width","color","Results","message","data","allRecords","record","filteredRecords","filter","indexOf","Footer","Modal","App","modal","show","showModal","modalTitle","modalMessage","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.35889d15.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = props => {\n    return (\n        <header className='header'>\n            <h1 className=\"header__title\" onClick={props.resetApp}>full guitar tabs database</h1>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nconst TabType = props => {\n\n    let { tabType, activeTab, getTabValue } = props;\n    const tabValue = tabType;\n\n    if (tabType === 'TEXT_GUITAR_TAB') {\n        tabType = 'guitar'.toUpperCase();\n    } else if (tabType === 'TEXT_BASS_TAB') {\n        tabType = 'bass'.toUpperCase();\n    }\n\n    return (\n        <div\n            className={activeTab === tabValue ? 'musicRecord__tabType musicRecord__tabType--active' : 'musicRecord__tabType'}\n            onClick={getTabValue}\n            tabvalue={tabValue}\n        >\n            {tabType}\n        </div>\n    )\n};\n\nexport default TabType;\n","export default function musicAPI(query) {\n    const API = `http://www.songsterr.com/a/ra/songs.json?pattern=${query}`;\n    return fetch(API)\n        .then(response => response.json())\n        .catch(error => {\n            console.log(error);\n        });\n}\n","import React, { Component } from 'react';\nimport AnimateHeight from 'react-animate-height';\n\nimport TabType from './TabType';\n\nimport musicAPI from '../musicAPI';\n\nclass Search extends Component {\n\n    state = {\n        userInput: '',\n        tabValue: '',\n        miniSearch: false\n    };\n\n    callSearch = async e => {\n        e.preventDefault();\n        const musicData = await musicAPI(this.state.userInput);\n        if (musicData.length === 0) {\n            this.setState({ userInput: '' });\n            return this.props.toggleModal(true, \"We couldn't find what you are looking for.\", \"Please make sure you typed artist's name or song title correctly.\");\n        }\n        this.props.getMusicData(musicData, this.state.userInput);\n        this.setState({ userInput: '' });\n    };\n\n    handleUserInput = e => {\n        const userInput = e.target.value;\n        this.setState({ userInput });\n    };\n\n    getTabValue = e => {\n        let tabValue = e.target.attributes['tabvalue'].value;\n        if (tabValue === this.state.tabValue) {\n            tabValue = '';\n        }\n        this.props.getTabValue(tabValue);\n        this.setState({ tabValue });\n    };\n\n    handleScroll = e => {\n        if (window.scrollY < 150 && this.state.miniSearch) {\n            this.setState({ miniSearch: false });\n        }\n        else if (window.scrollY >= 150 && !this.state.miniSearch) {\n            this.setState({ miniSearch: true });\n        }\n    }\n\n    componentDidMount() {\n        window.addEventListener('scroll', this.handleScroll);\n    }\n\n    componentWillUnmout() {\n        window.removeEventListener('scroll', this.handleScroll);\n    }\n\n    render() {\n\n        const { miniSearch } = this.state;\n        const { tabTypes } = this.props;\n        const types = tabTypes.map(type => (\n            <TabType tabType={type} key={type} activeTab={this.state.tabValue} getTabValue={this.getTabValue} />\n        ));\n\n        return (\n            <AnimateHeight duration={300} height='auto'>\n                <form className={miniSearch ? 'searchForm searchForm--mini' : 'searchForm'} onSubmit={this.callSearch}>\n                    {miniSearch ? null : <h2 className='searchForm__title'>search</h2>}\n                    <p className='searchForm__tabExplanation'>Choose your prefered tab type</p>\n                    <div className=\"musicRecord__tabTypes musicRecord__tabTypes--mainSearch\">\n                        {types}\n                    </div>\n                    {miniSearch ? null :\n                        <div>\n                            <p className='searchForm__subTitle'>Type artist's name or track's title</p>\n                            <input className='searchForm__searchInput' type=\"text\" placeholder=\"e.g. Leonard Cohen or Hallelujah\" onChange={this.handleUserInput} value={this.state.userInput} />\n                            <button type='submit' className='searchForm__button' disabled={(this.state.userInput && this.state.tabValue) ? false : true}>search</button>\n                        </div>}\n                </form>\n            </AnimateHeight>\n        )\n    }\n}\n\nexport default Search;","import React from 'react';\n\nimport TabType from './TabType';\n\nconst MusicRecord = props => {\n\n    const { title, tabTypes } = props.recordData;\n    const { name } = props.recordData.artist;\n\n    const tabTypesRecords = tabTypes.map(type => {\n        const key = props.recordData.id + type;\n        return <TabType key={key} tabType={type} activeTab={props.activeTab} />\n    });\n\n    return (\n        <div className='musicRecord'>\n            <h3 className='musicRecord__songTitle'>{title}</h3>\n            <p className='musicRecord__artistName'>{name}</p>\n            <div className='musicRecord__tabTypes'>\n                {tabTypesRecords}\n            </div>\n        </div>\n    )\n}\n\nexport default MusicRecord;","import React from \"react\";\nimport Loader from \"react-loader-spinner\";\n\nconst Spinner = () => {\n  return (\n    <Loader\n      type=\"Oval\"\n      height={80}\n      width={80}\n      color=\"#bada55\"\n      className=\"loader\"\n    />\n  );\n};\n\nexport default Spinner;\n","import React from 'react';\n\nimport MusicRecord from './MusicRecord';\nimport Spinner from './Loader';\n\nconst Results = props => {\n\n    let { tabValue, userInput, data } = props;\n    let message;\n\n    const allRecords = data.map(record => (\n        <MusicRecord key={record.id} recordData={record} activeTab={tabValue} />\n    ));\n\n    let filteredRecords = allRecords.filter(record => {\n        const tabTypes = [...record.props.recordData.tabTypes];\n        if (tabTypes.indexOf(tabValue) !== -1) return record\n        else return null;\n    });\n\n    if (tabValue !== '' && data.length > 0) {\n        message = <h1 className='results__title'>You are looking for {userInput}</h1>;\n    } else if (tabValue === '' && data.length > 0) {\n        message = <p className='results__title'>You are looking for {userInput} but you haven't choosen any tab type. Please click on your preferd tab type to select it.</p>;\n    }\n    else message = null;\n\n    if (tabValue === 'TEXT_GUITAR_TAB') {\n        tabValue = 'guitar'.toUpperCase();\n    } else if (tabValue === 'TEXT_BASS_TAB') {\n        tabValue = 'bass'.toUpperCase();\n    };\n\n    if (allRecords.length > 0 && filteredRecords.length === 0) {\n        filteredRecords = <p className='results__noTabs'>There are no {tabValue} records matching {userInput}. Please choose another tab type.</p>;\n    }\n\n    return (\n        <main className='results'>\n            {data.length === 0 ?\n                <>\n                    <h1 className='results__primaryTitle'>Hello</h1>\n                    <h2>Welcome in full tab types database.</h2>\n                    <div className=\"resutls__img\"></div>\n                </> : null}\n            {tabValue && userInput && data.length === 0 ? <Spinner /> :\n                <>\n                    {message}\n                    {tabValue !== '' && data.length > 0 ? filteredRecords : null}\n                </>\n            }\n        </main>\n    )\n}\n\nexport default Results;","import React from 'react';\n\nconst Footer = () => {\n    return (\n        <footer className='footer'>\n            <h1 className=\"footer__title\">\n                Artur Zarzycki\n            </h1>\n        </footer>\n    )\n}\n\nexport default Footer;","import React from 'react';\n\nconst Modal = props => {\n\n    const closeModal = () => props.toggleModal(false, '', '');\n\n    return (\n        <div className=\"modal\">\n            <div className=\"modalBackground\"></div>\n            <div className=\"modal__box\">\n                <h1 className=\"modal__title\">{props.title}</h1>\n                <p className=\"modal__message\">{props.message}</p>\n                <button className=\"modal__button\" onClick={closeModal}>close</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Modal;","import React, { Component } from 'react';\n\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport Results from './components/Results';\nimport Footer from './components/Footer';\nimport Modal from './components/Modal';\n\nimport './style/css/App.css';\n\nclass App extends Component {\n\n  state = {\n    musicData: [],\n    userInput: '',\n    tabValue: '',\n    modal: {\n      show: false,\n      title: '',\n      message: ''\n    }\n  }\n\n  tabTypes = ['PLAYER', 'TEXT_GUITAR_TAB', 'CHORDS', 'TEXT_BASS_TAB'];\n\n  getMusicData = (musicData, userInput) => {\n    this.setState({ musicData, userInput });\n  };\n\n  getTabValue = tabValue => {\n    this.setState({ tabValue });\n  };\n\n  toggleModal = (showModal, modalTitle, modalMessage) => {\n    this.setState({\n      modal: {\n        show: showModal,\n        title: modalTitle,\n        message: modalMessage\n      }\n    });\n  }\n\n  resetApp = () => {\n    this.setState({\n      musicData: [],\n      userInput: '',\n      tabValue: '',\n      modal: {\n        show: false,\n        title: '',\n        message: ''\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div className='mainContainer' >\n        {this.state.modal.show ? <Modal title={this.state.modal.title} message={this.state.modal.message} toggleModal={this.toggleModal} /> : null}\n        <Header resetApp={this.resetApp} />\n        <div className='contentContainer'>\n          <Search getMusicData={this.getMusicData} getTabValue={this.getTabValue} tabTypes={this.tabTypes} toggleModal={this.toggleModal} />\n          <Results data={this.state.musicData} tabValue={this.state.tabValue} userInput={this.state.userInput} toggleModal={this.toggleModal} />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}